package generator.random.PrefAttach;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;

import org.jgrapht.graph.DefaultDirectedWeightedGraph;
import org.jgrapht.graph.DefaultWeightedEdge;


public class PrefAttach {
	
	/**
	 * MODEL A: Preferential Attachment Model
	 * @author Dewan Ferdous Wahid
	 * @affiliation Dr. Yong Gao's Research Group, Computer Science, UBC (Okanagan)
	 * @date February 27, 2016
	 * 
	 **/

	//private static Random random = new Random();
	private static double[] posInDeg;
	private static double[] posOutDeg;
	private static double[] negInDeg;
	private static double[] negOutDeg;
	private static double totalPosDeg;
	private static double totalNegDeg;
	private static double tempTotPosDeg;
	private static double tempTotNegDeg;
	private static HashMap<Integer, Integer> tempPosInDeg = new HashMap<Integer, Integer>();
	private static HashMap<Integer, Integer> tempPosOutDeg = new HashMap<Integer, Integer>();
	private static HashMap<Integer, Integer> tempNegInDeg = new HashMap<Integer, Integer>();
	private static HashMap<Integer, Integer> tempNegOutDeg = new HashMap<Integer, Integer>();
	private static String outputFile = "RSDN-PrefAttach.csv";


	/**
	 * MODEL A: Preferential Attachment Model
	 * 
	 * @param N - number of vertices
	 * @param k - number of new connection added by entering vertex
	 * @return signed directed random network generated by Preferential attachment model
	 * 
	 * Using classes (inside this Package): 
	 * InitialNetwork - adds initial network, with exactly k positive edges and k negative edges
	 * 					to the random process.
	 * AddEdegs		  - adds k signed edges in preferred direction. The sign and direction have to
	 * 					in calling this method.
	 * 
	 * Dependency: jGrapht, 'http://jgrapht.org/'
	 * 
	 ***/


	public static DefaultDirectedWeightedGraph<Integer, DefaultWeightedEdge> getRandomNetwork(int N, int k) {
		
		//	creating graph object
		DefaultDirectedWeightedGraph<Integer, DefaultWeightedEdge> g = 
				new DefaultDirectedWeightedGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);
		
		try
		{
			
			//	Output file name and writer
			PrintWriter writer = new PrintWriter (outputFile);
			
			//	CSV file data heading
			writer.print("#Data name: Signed directed netwrok generated by Preferrential attachment model\n");
			writer.print("#Number of vertices: " + N);
			writer.print("\n#Number of Edges: "+ (4*k + (N-2*k-1)* 4*k ));
			writer.print("\n#Parameter k : " + k);
			writer.print("\n#Source, Target, Sign \n"); 
			
			//	Tracking degree of each N nodes
			posInDeg = new double[N+2];
			posOutDeg = new double[N+2];
			negInDeg = new double[N+2];
			negOutDeg = new double[N+2];
			
			/* 	Add initial network*/
			writer.print(InitialNetwork.addIniNet(g, N, k));
			
			//	Print initial network information
			/*System.out.println("\nInitial network:");

			for (int i=1; i<=(2*k+1); i++) {
				System.out.println("posInDeg["+i+"] = " + getPosInDeg(i)); 
				System.out.println("posOutDeg["+i+"] = " + getPosOutDeg(i));
				System.out.println("negInDeg["+i+"] = " + getNegInDeg(i)); 
				System.out.println("negOutDeg["+i+"] = " + getNegOutDeg(i));
			}
			System.out.println("Edge sets: " + g.edgeSet());
			System.out.println("totalPosDegree = " + getTotalPosDeg());
			System.out.println("totalNegDegree = " + getTotalNegDeg());
			System.out.println("#of vertices = " + g.vertexSet().size());*/
			
			
			/*	
			 * Add a new vertex at each time step
			 */
			//	Adding vertex set {2k+2,...,N} to the network inductively one at a time
			for (int vNew=(2*k+2); vNew<=N; vNew++) {
				
				//	add the new vertex to the network
				g.addVertex(vNew);
				
				//	For each new vertex 'vNew" add 'k' positive-in-wards edges w.r.to 'vNew'
				//		and write these newly edges to the outputFile 
				writer.print(AddEdges.add_k_inEdgesToNewVertex(g, k, vNew, 1));
				writer.print(AddEdges.add_k_outEdgesToNewVertex(g, k, vNew, 1));
				writer.print(AddEdges.add_k_inEdgesToNewVertex(g, k, vNew, -1));
				writer.print(AddEdges.add_k_outEdgesToNewVertex(g, k, vNew, -1));
				
				//	Updating total pos deg..................................
				//System.out.println("totalPosDeg (before): " + totalPosDeg);
				//System.out.println("tempTotPosDeg (before): " + tempTotPosDeg);
				
				totalPosDeg = totalPosDeg + tempTotPosDeg;
				tempTotPosDeg = 0;
				
				//System.out.println("totalPosDeg (after): " + totalPosDeg);
				//System.out.println("tempTotPosDeg (after): " + tempTotPosDeg);
				
				//	Updating total neg deg....................................
				//System.out.println("totalNegDeg (before): " + totalNegDeg);
				//System.out.println("tempTotNegDeg (before): " + tempTotNegDeg);
				
				totalNegDeg = totalNegDeg + tempTotNegDeg;
				tempTotNegDeg = 0;
				
				//System.out.println("totalNegDeg (after): " + totalNegDeg);
				//System.out.println("tempTotNegDeg (after): " + tempTotNegDeg);
				
				//	Updating posOutDeg 
				UpdateDegreeSigns.updatePosOutDeg (posOutDeg, tempPosOutDeg);
				
				//	Updating posInDeg
				UpdateDegreeSigns.updatePosInDeg (posInDeg, tempPosInDeg);
				
				//	Updating negOutDeg 
				UpdateDegreeSigns.updateNegOutDeg(negOutDeg, tempNegOutDeg);
				
				// 	Updating negInDeg
				UpdateDegreeSigns.updateNegInDeg(negInDeg,tempNegInDeg);
				
				//	Updating new vertex degree 
				updatedNewVertexDeg(posOutDeg, posInDeg, negOutDeg, negInDeg, vNew, k);
				
				//	Print network information after adding one new vertex
				/*System.out.println("\nNetwork after adding new vertex " + vNew + " : ");
				
				for (int i=1; i<=g.vertexSet().size(); i++) {
					System.out.println("posInDeg["+i+"] = " + getPosInDeg(i)); 
					System.out.println("posOutDeg["+i+"] = " + getPosOutDeg(i));
					System.out.println("negInDeg["+i+"] = " + getNegInDeg(i)); 
					System.out.println("negOutDeg["+i+"] = " + getNegOutDeg(i));
				}
				System.out.println("Edge sets: " + g.edgeSet());
				System.out.println("totalPosDegree = " + getTotalPosDeg());
				System.out.println("totalNegDegree = " + getTotalNegDeg());
				System.out.println("#of vertices = " + g.vertexSet().size());*/
				
			}

			writer.flush();
			writer.close();
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		return g; 
	}
	

	private static void updatedNewVertexDeg(double[] posOutDeg2,
			double[] posInDeg2, double[] negOutDeg2, double[] negInDeg2, int vNew, int k) {

		posOutDeg[vNew] = k;
		posInDeg[vNew] = k;
		negOutDeg[vNew] = k;
		negInDeg[vNew] = k;
		
	}


	// 	Setter for tempPosOutDeg to null
	protected static void setNullTempPosOutDeg() {
		tempPosOutDeg = new HashMap<Integer, Integer>();
	}
	
	// 	Setter for tempPosInDeg to null
	protected static void setNullTempPosInDeg() {
		tempPosInDeg = new HashMap<Integer, Integer>();
	}
	
	// 	Setter for tempNegOutDeg to Null
	protected static void setNullTempNegOutDeg() {
		tempNegOutDeg = new HashMap<Integer, Integer>();
	}
	
	// 	Setter for tempPosInDeg to null
	protected static void setNullTempNegInDeg() {
		tempNegInDeg = new HashMap<Integer, Integer>();
	}
	

	//	Setter for tempTotPosDeg
	protected static double setTempTotPosDeg(int d){
		tempTotPosDeg = tempTotPosDeg + d;
		return tempTotPosDeg;
	}
	
	
	//	Setter for tempTotNegDeg
	protected static double setTempTotNegDeg(int d){
		tempTotNegDeg = tempTotNegDeg + d;
		return tempTotNegDeg;
	}

	//	Getter method for posOutDeg of a vertex v
	protected static double getPosOutDeg(int v) {
		return posOutDeg[v];
	}

	//	Setter method for 'posOutDeg' to change the degree of 'v' vertex
	protected static double[] setPosOutDeg(int v, int d) {
		posOutDeg[v] = posOutDeg[v] + d;
		return posOutDeg;
	}
	
	//	Getter method for posInDeg of a vertex v
	protected static double getPosInDeg(int v) {
		return posInDeg[v];
	}
	
	//	Setter method for 'posInDeg' to change the degree of 'v' vertex
	protected static double[] setPosInDeg(int v, int d) {
		posInDeg[v] = posInDeg[v] + d;
		return posInDeg;
	}
	
	//	Getter method or negOutDeg of a vertex v
	protected static double getNegOutDeg(int v) {
		return negOutDeg[v];
	}

	//	Setter method for 'negOutDeg' to change the degree of 'v' vertex
	protected static double[] setNegOutDeg(int v, int d) {
		negOutDeg[v] = negOutDeg[v] + d;
		return negOutDeg;
	}
	
	//	Getter method for negInDeg of a vertex v
	protected static double getNegInDeg(int v) {
		return negInDeg[v];
	}
	
	//	Setter method for 'negInDeg' to change the degree of 'v' vertex
	protected static double[] setNegInDeg(int v, int d) {
		negInDeg[v] = negInDeg[v] + d;
		return negInDeg;
	}
	
	//	Getter method for totalPosDeg
	protected static double getTotalPosDeg() {
		return totalPosDeg;
	}
	
	//	Setter method for totalPosDeg, i.e. increase it by d degree 
	protected static double updateTotalPosDeg(double d) {		
		totalPosDeg = totalPosDeg + d;
		return totalPosDeg;
	}
	
	//	Getter method for totalNegDeg
	protected static double getTotalNegDeg() {
		return totalNegDeg;
	}
	
	//	Setter method for totalNegDeg, i.e. increase it by d degree 
	protected static double updateTotalNegDeg(double d) {
		totalNegDeg = totalNegDeg + d;
		return totalNegDeg;
	}

	protected static void setTempPosOutDeg(int src, int d) {
		tempPosOutDeg.put(src, d);		
	}

	protected static void setTempPosInDeg(int trg, int d) {
		tempPosInDeg.put(trg, d);		
	}

	protected static void setTempNegOutDeg(int src, int d) {
		tempNegOutDeg.put(src, d);		
	}

	protected static void setTempNegInDeg(int trg, int d) {
		tempNegInDeg.put(trg, d);
	}
}
